buildscript {
    dependencies {
        classpath("org.yaml:snakeyaml:1.25")
    }
}

plugins {
    id 'kotlin-multiplatform' version '1.3.50' apply false
    id "org.jetbrains.kotlin.jvm" version "1.3.50" apply false
    id 'org.jetbrains.gradle.plugin.idea-ext' version '0.5' apply false
    // executing node scripts (adds support for Yarn. Also - NPM, Grunt and Gulp)
    id 'com.moowork.node' version '1.3.1' apply false
    // publishing to bintray
    id "com.jfrog.bintray" version "1.8.4" apply false
}

// Build settings loading
import org.yaml.snakeyaml.Yaml

def devSettings = new File(rootDir, "build_settings.yml")
if (!devSettings.canRead()) {
    throw new GradleException("No build_settings.yml")
}
def cfg = new Yaml().load(devSettings.newInputStream())

project.ext.buildSettings = cfg


allprojects {
//    println "--- project ---: $project.name $project.depth ${if(project.depth > 0) project.parent.rootDir else ''}"
//    println "--- project ---: $project.name $project.rootDir"
}

def publishedProjects = [
        'base-portable',
        'base',
        'mapper-core',
        'vis-canvas',
        'vis-svg',
        'vis-svg-mapper',
        'vis-svg-mapper-jfx',
        'plot-base-portable',
        'plot-base',
        'plot-common-portable',
        'plot-common',
        'plot-builder-portable',
        'plot-builder',
        'plot-config-portable',
        'plot-config',
        'vis-demo-common',
        'vis-demo-common-jfx',
        'jvm-jfx-package',
]

subprojects {
    group 'org.jetbrains.datalore-plot'
    version = "1.0-SNAPSHOT"

    repositories {
        mavenCentral()
        jcenter()
    }

    tasks.all {
        if (name in ['compileKotlinJvm', 'compileTestKotlinJvm']) {
            kotlinOptions.jvmTarget = "1.8"

        }
//        if (name == 'compileKotlinJs') {
//        }
    }

    if (name in publishedProjects) {
        apply plugin: 'maven-publish'
        publishing {
            repositories {
                maven {
                    url = uri("$rootDir/.maven-publish-dev-repo")
                }
            }
        }
    }
}


// ----------------------------------------
// Building and publishing Python package
// ----------------------------------------

def PYTHON_BIN_PATH = project.buildSettings.python.python_bin_path
def PYTHON_INCLUDE_PATH = project.buildSettings.python.python_include_path

if (PYTHON_INCLUDE_PATH != null) {
    if (PYTHON_BIN_PATH != null) {

        def PYTHON_PACKAGE_DIR = "${project.projectDir}/python-package"
        def PYTHON_PACKAGE_BUILD_DIR = "${PYTHON_PACKAGE_DIR}/build"

        task updateJs(type:Exec) {
            workingDir PYTHON_PACKAGE_DIR

            commandLine "${PYTHON_BIN_PATH}/python3", 'setup.py', 'update_js'
        }

        task buildPythonPackage(type:Exec) {
            workingDir PYTHON_PACKAGE_DIR

            commandLine "${PYTHON_BIN_PATH}/python3",
                    'setup.py',
                    'bdist_wheel',
                    "--dist-dir=${PYTHON_PACKAGE_BUILD_DIR}/dist"
        }

        task localInstallPythonPackage(type:Exec) {
            workingDir "${PYTHON_PACKAGE_BUILD_DIR}/dist"

            commandLine "${PYTHON_BIN_PATH}/pip",
                    'install',
                    '--no-index',
                    '--find-links=./',
                    'datalore-plot'
        }


        def PROD_CREDENTIALS = project.buildSettings.python.pypi_creds.prod
        if (PROD_CREDENTIALS.username != null && PROD_CREDENTIALS.password != null) {
            task publishProdPythonPackage(type:Exec) {
                workingDir "${PYTHON_PACKAGE_BUILD_DIR}/dist"

                commandLine "${PYTHON_BIN_PATH}/twine",
                        "upload",
                        "-u",
                        PROD_CREDENTIALS.username,
                        "-p",
                        PROD_CREDENTIALS.password,
                        "./*"
            }
        }

        def TEST_CREDENTIALS = project.buildSettings.python.pypi_creds.test
        if (TEST_CREDENTIALS.username != null && TEST_CREDENTIALS.password != null) {
            task publishTestPythonPackage(type: Exec) {
                workingDir "${PYTHON_PACKAGE_BUILD_DIR}/dist"

                commandLine "${PYTHON_BIN_PATH}/twine",
                        "upload",
                        "--repository-url",
                        "https://test.pypi.org/legacy/",
                        "-u",
                        TEST_CREDENTIALS.username,
                        "-p",
                        TEST_CREDENTIALS.password,
                        "./*"
            }
        }

        updateJs.dependsOn(':js-package:build')

        buildPythonPackage.dependsOn(':python-extension:build')

        buildPythonPackage.dependsOn(updateJs)

        localInstallPythonPackage.dependsOn(buildPythonPackage)
        //publishPythonPackage.dependsOn(buildPythonPackage)


    } else {
        println("------------------------------------------------------------------------------------------------")
        println("Python package build unavailable. Please set \"python_bin\" property in build_settings.yml file.")
        println("------------------------------------------------------------------------------------------------")
    }

} else {
    println("------------------------------------------------------------------------------------------------")
    println("Python package build unavailable. Please set \"python_include_path\" property in build_settings.yml file.")
    println("------------------------------------------------------------------------------------------------")
}
