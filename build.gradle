buildscript {
    dependencies {
        classpath("org.yaml:snakeyaml:1.25")
    }
}

plugins {
    id 'kotlin-multiplatform' version '1.3.50' apply false
    id "org.jetbrains.kotlin.jvm" version "1.3.50" apply false
    id 'org.jetbrains.gradle.plugin.idea-ext' version '0.5' apply false
    // executing node scripts (adds support for Yarn. Also - NPM, Grunt and Gulp)
    id 'com.moowork.node' version '1.3.1' apply false
    // publishing to bintray
    id "com.jfrog.bintray" version "1.8.4" apply false

    // for `clean` task
    id "base"
}

// Build settings loading
import org.yaml.snakeyaml.Yaml

def buildSettings = new File(rootDir, "build_settings.yml")
if (!buildSettings.canRead()) {
    throw new GradleException("Couldn't read build_settings.yml")
}
project.ext.buildSettings = new Yaml().load(buildSettings.newInputStream())


allprojects {
//    println "--- project ---: $project.name $project.depth ${if(project.depth > 0) project.parent.rootDir else ''}"
//    println "--- project ---: $project.name $project.rootDir"
}

def publishedProjects = [
        'base-portable',
        'base',
        'mapper-core',
        'vis-canvas',
        'vis-svg',
        'vis-svg-mapper',
        'vis-svg-mapper-jfx',
        'plot-base-portable',
        'plot-base',
        'plot-common-portable',
        'plot-common',
        'plot-builder-portable',
        'plot-builder',
        'plot-config-portable',
        'plot-config',
        'vis-demo-common',
        'vis-demo-common-jfx',
        'jvm-jfx-package',
]

subprojects {
    group 'org.jetbrains.datalore-plot'
    version = "1.0-SNAPSHOT"

    repositories {
        mavenCentral()
        jcenter()
    }

    tasks.all {
        if (name in ['compileKotlinJvm', 'compileTestKotlinJvm']) {
            kotlinOptions.jvmTarget = "1.8"

        }
//        if (name == 'compileKotlinJs') {
//        }
    }

    if (name in publishedProjects) {
        apply plugin: 'maven-publish'
        publishing {
            repositories {
                maven {
                    url = uri("$rootDir/.maven-publish-dev-repo")
                }
            }
        }
    }
}


// ----------------------------------------
// Building and publishing Python package
// ----------------------------------------

def python_bin_path = project.buildSettings.python.bin_path
def python_include_path = project.buildSettings.python.include_path
def task_group = 'datalore plot'

if (python_include_path != null) {
    if (python_bin_path != null) {

        def python_package_dir = "${projectDir}/python-package"
        def python_package_build_dir = "${python_package_dir}/build"
        def python_build_dist_dir = "${python_package_dir}/dist"

        clean {
            delete python_package_build_dir
            delete "${python_package_dir}/datalore/package_data"
            delete "${python_package_dir}/datalore_plot.egg-info"
        }

        task buildPythonPackage(type: Exec) {
            group = task_group
            description = 'Builds datalore-plot wheel distribution (python)'

            workingDir python_package_dir
            commandLine "${python_bin_path}/python3",
                    'setup.py',
                    'update_js',
                    'bdist_wheel',
                    "--dist-dir=${python_build_dist_dir}"
        }

        task localInstallPythonPackage(type: Exec) {
            group = task_group
            description = 'Installs datalore-plot python package to local environment'

            workingDir python_build_dist_dir
            commandLine "${python_bin_path}/pip",
                    'install',
                    '--no-index',
                    '--find-links=./',
                    'datalore-plot'
        }


        def pypi_prod = project.buildSettings.pypi.prod
        if (pypi_prod.username != null && pypi_prod.password != null) {
            task publishProdPythonPackage(type: Exec) {
                group = task_group
                description = 'Publishes datalore-plot python package to pypi.org'

                workingDir python_build_dist_dir
                commandLine "${python_bin_path}/twine",
                        "upload",
                        "-u",
                        pypi_prod.username,
                        "-p",
                        pypi_prod.password,
                        "./*"
            }
        }

        def pipy_test = project.buildSettings.pypi.test
        if (pipy_test.username != null && pipy_test.password != null) {
            task publishTestPythonPackage(type: Exec) {
                group = task_group
                description = 'Publishes datalore-plot python package to test.pypi.org'

                workingDir python_build_dist_dir
                commandLine "${python_bin_path}/twine",
                        "upload",
                        "--repository-url",
                        "https://test.pypi.org/legacy/",
                        "-u",
                        pipy_test.username,
                        "-p",
                        pipy_test.password,
                        "./*"
            }
        }

        buildPythonPackage.dependsOn(':js-package:build')
        buildPythonPackage.dependsOn(':python-extension:build')

        localInstallPythonPackage.dependsOn(buildPythonPackage)
        //publishPythonPackage.dependsOn(buildPythonPackage)


    } else {
        println("------------------------------------------------------------------------------------------------")
        println("Python package build unavailable. Please set \"python_bin\" property in build_settings.yml file.")
        println("------------------------------------------------------------------------------------------------")
    }

} else {
    println("------------------------------------------------------------------------------------------------")
    println("Python package build unavailable. Please set \"python_include_path\" property in build_settings.yml file.")
    println("------------------------------------------------------------------------------------------------")
}
