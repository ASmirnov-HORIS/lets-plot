package jetbrains.datalore.plot.builder.interact

import jetbrains.datalore.plot.builder.interact.MappedDataAccessMock.Companion.variable
import jetbrains.datalore.plot.builder.map.GeoPositionField.DATA_COLUMN_JOIN_KEY
import jetbrains.datalore.visualization.plot.base.Aes
import kotlin.test.BeforeTest
import kotlin.test.Test

class TooltipSpecFactorySkippedAesTest : jetbrains.datalore.plot.builder.interact.TooltipSpecTestHelper() {

    @BeforeTest
    fun setUp() {
        init()
    }

    @Test
    fun whenSameVarMappedTwiceAsContinuousAndDiscrete_UseContinuousValue() {

        val commonLabel = "count"
        val var1 = variable().name(commonLabel).value("4").isContinuous(true)
        val var2 = variable().name(commonLabel).value("6").isContinuous(false)

        val widthMapping = var1.mapping(Aes.WIDTH)

        addMappedData(widthMapping)
        addMappedData(var2.mapping(Aes.SIZE))

        buildTooltipSpecs()

        assertTooltipsCount(1)
        assertLines(0, widthMapping.longTooltipText())
    }

    @Test
    fun shouldSkipMapIdMapping() {
        addMappedData(variable().name("foo").mapping(Aes.MAP_ID))

        buildTooltipSpecs()

        assertTooltipsCount(0)
    }

    @Test
    fun shouldNotSkipMapIdMappingVar_whenOtherMappingWithSameVarExists() {
        val commonLabel = "foo"
        addMappedData(variable().name(commonLabel).mapping(Aes.MAP_ID))
        addMappedData(variable().name(commonLabel).mapping(Aes.FILL))

        buildTooltipSpecs()

        assertTooltipsCount(1)
    }

    @Test
    fun shouldSkipAutoGeneratedMappings() {
        addMappedData(variable().name(DATA_COLUMN_JOIN_KEY).mapping(Aes.WIDTH))

        buildTooltipSpecs()

        assertTooltipsCount(0)
    }
}
