plugins {
    id 'kotlin-multiplatform'
    id 'org.jetbrains.gradle.plugin.idea-ext'
    id 'groovy'   // add 'test' task
//    id 'com.moowork.node' version '1.3.1' // executing node scripts (adds support for Yarn. Also - NPM, Grunt and Gulp)
}

kotlin {
    jvm()
    js() {
        compileKotlinJs {
            kotlinOptions.sourceMap = true
            kotlinOptions.sourceMapEmbedSources = "always"
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
                implementation "io.github.microutils:kotlin-logging-common:$kotlinLogging_version"

                // ToDo: get rid of this dependency
                implementation kotlin('test-common')    // for Assertions.kt
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                api "com.google.code.gson:gson:$gson_version"
                compileOnly "org.hamcrest:hamcrest-core:$hamcrest_version"
                compileOnly "org.hamcrest:hamcrest-library:$hamcrest_version"
                implementation "io.github.microutils:kotlin-logging:$kotlinLogging_version"

                // ToDo: get rid of this dependency
                compileOnly kotlin('test')  // for Assertions.kt
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation "org.hamcrest:hamcrest-core:$hamcrest_version"
                implementation "org.hamcrest:hamcrest-library:$hamcrest_version"
                implementation "org.mockito:mockito-core:$mockito_version"
                implementation "org.assertj:assertj-core:$assertj_version"
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "io.github.microutils:kotlin-logging-js:$kotlinLogging_version"

                // ToDo: get rid of this dependency
                compileOnly kotlin('test-js')   // for Assertions.kt
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}

idea {
    module {
        settings {
            packagePrefix["src/jvmMain/kotlin"] = "jetbrains.datalore"
            packagePrefix["src/jvmTest/kotlin"] = "jetbrains.datalore"
        }
    }
}


// TMP: publish artifacts needed to build batik-based demo
apply plugin: 'maven-publish'
publishing {
    repositories {
        maven {
            url = uri("$rootDir/out-repo")
        }
    }
}

// from here: https://mrhaki.blogspot.com/2014/10/gradle-goodness-show-standard-out-or.html
// or here: https://stackoverflow.com/questions/43289503/where-does-the-output-of-system-out-println-go-in-gradle-test
// but it doesn't seem to make any difference: println: jvmTest - OK, macosTest - nothing.
//test {
//    testLogging {
//        // Make sure output from
//        // standard out or error is shown
//        // in Gradle output.
////        showStandardStreams = true
//
//        // Or we use events method:
//         events 'standard_out', 'standard_error'
//
//        // Or set property events:
//        // events = ['standard_out', 'standard_error']
//
//        // Instead of string values we can
//        // use enum values:
//        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
//        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
//    }
//}


// JS tests config (https://medium.com/@gz_k/effective-tool-chain-for-kotlin-js-testing-b243449e8a16)


/*
//apply plugin: 'com.moowork.node'
//apply plugin: 'com.moowork.node'  // gradle node plugin (yarn support): https://github.com/srs/gradle-node-plugin

//task populateNodeModules(type: Copy, dependsOn: tasks.compileTestKotlin2Js) {
task populateNodeModules(type: Copy, dependsOn: compileKotlinJs) {
    from compileKotlinJs.destinationDir
    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    println ">>> populateNodeModules from ${compileKotlinJs.destinationDir}"
    println ">>> populateNodeModules into ${buildDir}/node_modules"
    into "${buildDir}/node_modules"
}

node {
//    version = '10.16.0'
    version = '6.9.1'
    download = true
}

task yarnInstall(type: YarnTask) {
    args = ['install']
}

task runKarma(type: YarnTask, dependsOn: [populateNodeModules, yarnInstall]) {
    args = ['test']
}

test.dependsOn runKarma
*/


