plugins {
    id 'kotlin-multiplatform' version '1.3.30'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '0.5'
}
repositories {
    mavenCentral()
}

kotlin {
    jvm()
    js() {
        compileKotlinJs {
            kotlinOptions {
                main = "call"
                metaInfo = true
//                moduleKind = "commonjs"
//                moduleKind = "plain"
//                moduleKind = "umd"
//                moduleKind = "amd"
                sourceMap = true

//                noStdlib = true
            }
        }
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
//    macosX64("macos")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
//        macosMain {
//        }
//        macosTest {
//        }
    }
}

// ---------------------------------
// Trick to copy kotlin.js to output
configurations {
    kotlinJsLibs
}

dependencies {
    kotlinJsLibs "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
}
// ---------------------------------

task copyJsDependencies(type: Copy) {
// since 1.3.30: Resolving configuration 'jsMainImplementation' directly is not allowed    
//    configurations.jsMainImplementation.each {
    configurations.kotlinJsLibs.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }
    into "${project.buildDir}/out/js"
}

task copyJsMain(type: Copy) {
    from "${project.buildDir}/classes/kotlin/js/main"
    into "${project.buildDir}/out/js"
}

task copyJsResources(type: Copy) {
    from "${project.buildDir}/processedResources/js/main"
    into "${project.buildDir}/out/js"
}


build.dependsOn += copyJsDependencies
build.dependsOn += copyJsMain
build.dependsOn += copyJsResources

println "======================================="
build.dependsOn.forEach {
    println it
}